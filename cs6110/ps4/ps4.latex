\documentclass[11pt]{article}

\usepackage{amssymb}
\usepackage{amsmath}
\usepackage[left=0.8in,right=0.8in,top=0.8in,bottom=0.8in]{geometry}
\usepackage{611}
\usepackage{proof}
\usepackage{stmaryrd}

\makeatletter
\def\maketitle{%

    \begin {center}
    \bfseries
    \begin{tabular}{|rcl|}
        \hline
        & \@author & \\
        \@title & & \@set \\
        \@subtitle & & Due: \@duedate \\
        \hline
    \end{tabular}
    \end {center}

} % maketitle

\def\set#1{\def\@set{#1}}
\def\duedate#1{\def\@duedate{#1}}
\def\subtitle#1{\def\@subtitle{#1}}
\def\netid#1{\def\@netid{#1}}

\makeatother

\author {Lyublena Antova, Viktor Ivanov}
\netid {lra33, vri3}
\title {Advanced PL}
\subtitle {CS 6110, Spring 2009}
\duedate {Friday, April 17}
\set {Problem Set 4}

\begin{document}

\maketitle

\begin{enumerate}
  %--------------------
  % *** Problem 1 *** %
  %--------------------
  \item \textbf{Domain Isomorphism}

    \begin{enumerate}
    % Part a.
    \item Isomorphic.
	The two domains are isomorphic, since we can define a mapping $\theta$ that maps $D$ to $D\times U$ as follows:
	\[
		\forall d\in D:~ \theta(d) = (d,unit)
	\]
	The mapping $\theta$ is bijective. Indeed, for each element $x$ there is an element $x'\in D\times U$ defined as above, and for each element $x'=(x,unit)\in D\times U$ there is a unique element $x\in D$. The ordering $\sqsubseteq$ on $D\times U$  is defined as $(x_1, unit)\sqsubseteq (x_2,unit)$ iff $x_1 \sqsubseteq x_2$. We can show that the mapping $\theta$ is continuous since it is
	\begin{itemize}
		\item
		monotonic: let $x_1,x_2\in D: x_1\sqsubseteq x_2$. Then $\theta(x_1)=(x_1,unit)\sqsubseteq (x_2,unit) = \theta(x_2)$.
		\item
		for every chain $x_0\sqsubseteq x_1\sqsubseteq x_2\sqsubseteq\ldots$ of elements from $D$:
		\[
			\bigsqcup_n \theta(x_n) =  \bigsqcup_n (x_n, unit) = (\bigsqcup_n x_n,\bigsqcup_n  unit) = (\bigsqcup_n x_n,unit) = \theta (\bigsqcup_n x_n)
		\]
	\end{itemize}
    % Part b.
    \item Not isomorphic.
    The two domains are not isomorphic since the sets $D\rightarrow E$ and $\{f\in D_{\bot}\rightarrow E_{\bot} \mid f(\bot)=\bot\}$ are of different cardinality. Consider for example CPOs $D=E=(\{1\},=)$. Then the set $D\rightarrow E$ will consist of the function $f: f(1) = 1$, and the set $\{f\in D_{\bot}\rightarrow E_{\bot} \mid f(\bot)=\bot\}$ will contain the two functions $f_1: f_1(1)=1, f_1(\bot)=\bot$ and $f_2: f_2(1)=f_2(\bot)=\bot$. Thus no bijection between the two sets can exist, hence the domains are non-isomorphic.
	    % Part c.
    	\item Isomorphic.
    	The two domains are isomorphic since the mapping \textbf{curry} that maps elements from $D\times E\rightarrow F$ to elements in $D\rightarrow E\rightarrow F$ is bijective and continuous. \textbf{curry} is defined as:
    	\[
    		\textbf{curry} := \lam{f}{\lam{d\in D}{\lam{e\in E}{f(d,e)}}}
    	\]
	    The inverse function \textbf{uncurry} is defined as follows:
	    \[
	    		\textbf{uncurry} := \lam{g}{\lam{(d,e)\in D\times E}{(g(d))(e)}}
	    \]

    \end{enumerate}
    The mapping curry is 
		\begin{itemize}
			\item monotone: Let $f_1,f_2\in D\times E\rightarrow F: f_1\sqsubseteq f_2$ and let $g_i=\textbf{curry}(f_i), i=1,2$.
			\begin{eqnarray*}
				&& f_i \sqsubseteq f_2 \Leftrightarrow\\
				&& \forall (d,e)\in D\times E:~ f_1(d,e)\le f_2(d,e) \Leftrightarrow \forall d\in D~\forall e\in E ~ f_1(d,e)\le f_2(d,e)\\
				&& \Leftrightarrow \forall d\in D ~ \forall e\in E ~\textbf{curry}(f_1)(d)(e) \sqsubseteq \textbf{curry}(f_2)(d)(e) \\
				&& \Leftrightarrow \forall d\in D ~ \textbf{curry}(f_1)(d) \sqsubseteq \textbf{curry}(f_2)(d) \\
				&& \Leftrightarrow \textbf{curry}(f_1) \sqsubseteq \textbf{curry}(f_2)\\
			\end{eqnarray*}
			\item preserves LUB: Let $f_0\sqsubseteq f_1\sqsubseteq f_2 \sqsubseteq \ldots$ be a chain of elements in $D\times E\rightarrow F$. Let $f=\bigsqcup\limits_n f_n$, that is $f_n\sqsubseteq f$ for all n.
			 Let $g_n = \textbf{curry}(f_n), g = \textbf{curry}(f)$. Since \textbf{curry} is monotone, $g_n\sqsubseteq g$ for all $n$, that is $g$ is an upper bound of the chain $g_0\sqsubseteq g_1 \sqsubseteq g_n \sqsubseteq \ldots$. Assume now there is a function $g'\in D\rightarrow E\rightarrow F$ such that $g_n\sqsubseteq g'\sqsubset g$ for all $n$. Then for all $d\in D$ $g'(d)\sqsubseteq g(d)$ and there is a $d_0\in D: g'(d_0)\sqsubset g(d_0)$. This means that for all $e\in E~ g'(d)(e)\le g(d)(e)$ and for some $e_0\in E g'(d_0)(e_0)< g(d_0)(e_0)$. But then if $f'=\textbf{uncurry}(g')$ we have $f_n\sqsubseteq f'\sqsubset f$, which is a contradiction to the assumption that $f=\bigsqcup\limits_n f_n$.
		\end{itemize}    
  %--------------------
  % *** Problem 2 *** %
  %--------------------
  \item \textbf{Iterators}
	\begin{enumerate}
		% --- 2a. ---
		\item Operational Semantics
		
		Evaluation context:
		\begin{equation*}
			E ::= \ldots \mid \textbf{yield}~E \mid \FOR~x~\textbf{in}~E~\DO~e_0
		\end{equation*}
		
		To define the operational semantics of iterators, we will introduce the command \textbf{save}$_v$, which will save the value produced by a \textbf{yield} operation. The rules we need to add are then the following:

		\begin{equation*}
			 \Rule{}{<\FOR~x~in~v~\DO~e_b, \sigma> \stepsone <\textbf{null},\sigma>}
		\end{equation*}

		
		\begin{equation*}
			 \Rule{}{<\textbf{yield}~v, \sigma> \stepsone <\textbf{save}_v,\sigma>}
		\end{equation*}
		
		
		\begin{equation*}
			 \Rule{}{<\FOR~x~in~E[\textbf{save}_v]~\DO~e_b, \sigma> \stepsone <\FOR~x~in~E[\subst{e_b}{v}{x}]~\DO~e_b, \sigma>}
		\end{equation*}

		
		
		
		% --- 2b. ---
		\item CPS Translation

		We are going to do the translation in the usual naming environment $\rho$, control context $k$ and a new coroutine context $c$. The idea is that when translating the iterator, we are going to pass it a new $c$ where we take the next value for $x$ and a continuation and translate the body using these. When translating \textbf{yield} we use the coroutine context $c$ passing it the value of $e$ and the continuation $k$.

		\begin{eqnarray*}
			& & \SB{\textbf{yield}~e}\rho k c = \SB{e}\rho(\lam v c~v~k)c \\
			& & \SB{\textbf{for}~x~\textbf{in}~e_i~\DO~e_b}\rho k c = 
				\SB{e_i}\rho k (\lam{vk'}\SB{e_b}(EXTEND~\rho~``x"~v) k' c) 
		\end{eqnarray*}

	\end{enumerate}
  %--------------------
  % *** Problem 3 *** %
  %--------------------
  \item \textbf{Axiomatic Semantics}
	\begin{enumerate}
	% --- 3a. ---
	\item Hoare logic rules for \textbf{while} loops.
		\begin{enumerate}
		\item The rule \Rule {\{A\}c\{A\}}{\{A\}\WHILE~b~\DO~c\{A \land \neg b \}} is sound. Assuming that the premise, $\{A\}~c~\{A\}$, holds we can use other sound logic rules to show that the conclusion is also valid:

\medskip

\begin{equation*}
\RuleSide {\Rule {\{A\}c\{A\}}{(A \land b \Rightarrow A)~(\{A\}c\{A\})~(A \Rightarrow A)}} {
\RuleSide {\{A \land b\}c\{A\}} {\{A\}\WHILE~b~\DO~c\{A \land \neg b \}}{(While)} }{(Conseq)}
\end{equation*}

\medskip

		\item The rule \Rule {\{A \land b\}c\{A \lor b\}}{\{A\}\WHILE~b~\DO~c\{A \land \neg b \}} is {\em not} sound. Here is a counterexample:

Consider $c = \IF~x=1~\THEN~x:=2~\ELSE~flag:=\FALSE$, $b = flag$ and $A = x=1$. Then, $\{A \land b\}c\{A \lor b\}$ is a valid partial correctness assumption, however, $\{A\}\WHILE~b~\DO~c\{A \land \neg b \}$ is not. For example, if $\sigma = \{b \mapsto \TRUE, x \mapsto 1\}$ then $A$ holds before executing the loop but does not hold afterwards.

		\end{enumerate}
	% --- 3b. ---
	\item Hoare logic rule for the $\DO~\UNTIL$ loop.

	A $\DO~c~\UNTIL~b$ loop is equivalent to $c;~\WHILE~\neg b~\DO~c$ thus we can write the following rule for the $\DO~\UNTIL$ loop:

\begin{equation*}
	\Rule {\{A\}c;~\WHILE~\neg b~\DO~c\{B\}} {\{A\}\DO~c~\UNTIL~b\{B\}}
\end{equation*}

	We can then use the sequencing rule on the premise and get: 

\begin{equation*}
	\Rule {\Rule {\{A\}c\{C\}~~\{C\}\WHILE~\neg b~\DO~c\{B\}}{\{A\}c;~\WHILE~\neg b~\DO~c\{B\}}} {\{A\}\DO~c~\UNTIL~b\{B\}}
\end{equation*}

 	We know the \WHILE~rule has a postcondition $C \land b$ where $C$ is the loop invariant. We can now expand the proof tree with the \WHILE~rule:

\begin{equation*}
	\Rule
		{\Rule
			{\{A\}c\{C\}~~\Rule
											{\{C \land \neg b\}c\{C\}}
											{\{C\}\WHILE~\neg b~\DO~c\{C \land b\}}}
			{\{A\}c;~\WHILE~\neg b~\DO~c\{C \land b\}}} 
		{\{A\}\DO~c~\UNTIL~b\{C \land b\}}
\end{equation*}

	We already have the partial correction assertion $\{C \land \neg b\}c\{C\}$. Using the rule of consequence as we did in the first part of this problem we can obtain the partial correction assertion $\{C\}c\{C\}$. Finally, if we let $A = C$ we get a valid and usable rule for the $\DO~\UNTIL$ loop:

\begin{equation*}
	\Rule
		{\{C \land \neg b\}c\{C\}}
		{\{C\}\DO~c~\UNTIL~b\{C \land b\}}
\end{equation*}


	\end{enumerate}
  %--------------------
  % *** Problem 4 *** %
  %--------------------
  \item \textbf{Explicit Initialization}
	\begin{enumerate}
		\item Evaluation Context and Small-Step Operational Semantics
		\begin{equation*}
			E ::= \ldots |~\#n~E~|~\#n~E:=e~|~\#n~(v_1, v_2, \ldots, v_{n-1}, \textbf{null}, \ldots ) := E
		\end{equation*}
		
		\begin{equation*}
			 \Rule{}{\textbf{malloc}~\tau_1 * \ldots * \tau_n \stepsone (\textbf{null}, \ldots, \textbf{null})} 
		\end{equation*}
		
		\begin{equation*}
			\Rule{}{\#n~(v_1, \ldots, v_{n-1}, v_n, \ldots) \stepsone v_n }
		\end{equation*}
		
		\begin{equation*}
			\Rule{} {\#n~(v_1, \ldots, v_{n-1}, \textbf{null}, \ldots) := v_n 
	\stepsone (v_1, \ldots, v_{n-1}, v_n, \ldots)}
		\end{equation*}

		\item Static Semantics

		\begin{equation}
			\Rule
				{}
				{\Gamma \proves \textbf{malloc}~\tau_1 * \ldots * \tau_n : 
					(\tau_1 * \ldots * \tau_n)\backslash\{1, \ldots, n\}}
		\end{equation}

		\begin{equation}
			\Rule
				{\Gamma \proves e : 
					(\tau_1*\ldots*\tau_n*\ldots\backslash\{n_1, \ldots, n_k\}~
					\forall i. n_i \neq n}
				{\Gamma \proves \#n~e : \tau_n}
		\end{equation}

		\begin{equation}
			\Rule
				{\Gamma \proves e_1 : (\tau_1*\ldots*\tau_n*\ldots)\backslash\{n_1, \ldots, n_k\}~
				\exists i. n_i = n~
				\Gamma \proves e_2 : \tau_n}
				{\Gamma \proves \#n~e_1 := e_2 :  
					(\tau_1 * \ldots * \tau_n * \ldots)\backslash\{n_1, \ldots, n_{i-1}, n_{i+1}, \ldots n_k\}}
		\end{equation}

		\item Proof of Soundness
		
		\begin{enumerate}
		\item Preservation Lemma
	The Preservation Lemma states that for a typed expression $e$, if $e$ can be stepped to $e'$ then $e'$ has the same type as $e$:

		\begin{equation*}
			\proves e : \tau \land e \stepsone^* e' \Rightarrow e' : \tau
		\end{equation*}

	We are going to prove this lemma by induction on the typing derivations of $\proves e : \tau$. Let's examine cases on $e \stepsone e'$. The cases for reducing on the left and on the right side of application and the $\beta$-reduction case were shown in class. Here we show the cases new to this problem.

\medskip

	\begin{itemize}
	\item
	{\em Case Index:} $e = \#n~e_0$, $e' = \#n~e_0'$
		
			Given $\proves e : \tau_n$, that is,  $\proves (\#n~e_0) : \tau_n$. To prove this we must have had
			\[
				\proves e_0 : (\tau_1*\ldots*\tau_n*\ldots)\backslash\{n_1, \ldots, n_k\}~\forall i. n_i \neq n
			\]

		Since the typing derivation for $e_0$ is a subderivation of the derivation for $e$, by the induction hypothesis the step $e_0 \stepsone e_0'$ preserves type thus:

		\begin{equation*}
			\proves e_0' : (\tau_1*\ldots*\tau_n*\ldots)\backslash\{n_1, \ldots, n_k\}~
										\forall i. n_i \neq n
		\end{equation*}

	Now that we know the type of $e_0'$ we can use the rule for typing $\#n~e$ to prove the type of $e'$:

		\begin{equation*}
			\Rule
				{\Gamma \proves e_0' : 
					(\tau_1*\ldots*\tau_n*\ldots)\backslash\{n_1, \ldots, n_k\}~
					\forall i. n_i \neq n}
				{\Gamma \proves \#n~e_0' : \tau_n}
		\end{equation*}

		Finally, $\proves \#n~e_0' : \tau_n \Rightarrow~ \proves e' : \tau_n$.

\medskip
	\item
	{\em Case Left-of-Assignment:} $e = (\#n~e_1 := e_2)$, $e' = (\#n~e_1' := e_2)$

		Assume $\proves e : (\tau_1 * \ldots * \tau_n * \ldots)\backslash\{n_1, \ldots, n_{i-1}, n_{i+1}, \ldots n_k\}$.
		Then it must hold that
		\[
			\proves e_1 : (\tau_1*\ldots*\tau_n*\ldots)\backslash\{n_1, \ldots, n_k\} \land
				\exists i. n_i = n \land \proves e_2 : \tau_n
		\]

		Since the typing derivation for $e_1$ is a subderivation of the derivation for $e$, by the induction hypothesis the step $e_1 \stepsone e_1'$ preserves type, thus:

		\begin{equation*}
			\proves e_1 : (\tau_1*\ldots*\tau_n*\ldots)\backslash\{n_1, \ldots, n_k\}~
				\exists i. n_i = n
		\end{equation*}

Now that we have the type of $e_1'$ and we also know that $\proves e_2 : \tau_n$ we actually have all premises needed to prove that $e : (\tau_1 * \ldots * \tau_n * \ldots)/ (n_1, \ldots, n_{i-1}, n_{i+1}, \ldots n_k)$.

\medskip
	\item
	{\em Case Right-of-Assignment:} 

	$e = \#n~(v_1, \ldots, v_{n-1}, \textbf{null}, \ldots ) := e_0$, $e' = \#n~(v_1, \ldots, v_{n-1}, \textbf{null}, \ldots ) := e_0'$

	Assume $\proves e : (\tau_1 * \ldots * \tau_n * \ldots)\backslash \{n_1, \ldots, n_i, \ldots n_k\}$.
			Then it must hold that
			\[
				\proves (v_1, \ldots, v_{n-1}, \textbf{null}, \ldots ): (n_1, \ldots, n_i, \ldots n_k) ~ \land ~ \exists i. n_i = n ~ \land ~ \proves e_0 : \tau_n
			\]
			Since the derivation for $e_0$ is a subderivation for the derivation for $e_0$, and $e\stepsone e_0'$, we can use the induction hypothesis to conclude that $\proves e_0': \tau_n$. But now we can use typing rule (3) to show that
			\[
			\proves e': (\tau_1 * \ldots * \tau_n * \ldots)/ (n_1, \ldots, n_i, \ldots n_k)
			\]
		\end{itemize}
		
		\item Progress Lemma
		
		The progress lemma states that we cannot get stuck while evaluating a well-formed expression, and is formulated as follows:
		\[
			\proves e:\tau \Rightarrow e \in ~ \textbf{Value} \lor \exists e': e\stepsone e'
		\]
		
		We will prove this by induction on the typing derivation of $e$. In addition to the cases proven in class, we need to show that the theorem holds for the new types of expression defined in the exercise, namely for the three types of expressions
		\[
			\textbf{malloc} ~ \tau_1 * \ldots * \tau_n, ~ \#n~e, ~ \#n~e_1:= e_2
		\]

		\begin{itemize}
			\item				
			{\em Case $e = \textbf{malloc} ~ \tau_1 * \ldots * \tau_n:$}
			
			We have 
			\[
				 \textbf{malloc}~\tau_1 * \ldots * \tau_n \stepsone (\textbf{null}, \ldots, \textbf{null}) \in \textbf{Value}
			\]
			
			\medskip
			
			\item
			{\em Case $e = (\#n~e_0)$}:
			
			Assume $\proves \#n~e_0: \tau$ holds. Then it must hold that 
			\[
				\proves e_0 : (\tau_1*\ldots*\tau_n*\ldots)/(n_1, \ldots, n_k)~\forall i. n_i \neq n
			\]
			From the induction hypothesis either $e_0\in\textbf{Value}$, or $\exists e_0': e_0\stepsone e_0'$. Suppose $e_0 \in \textbf{Value}$, then $e_0=(v_1,\ldots,v_n, \ldots), v_i \in \textbf{Value}, \forall i$. But from the the operational semantics rules we have:
			\[
				\#n (v_0, \ldots, v_n, \ldots) \stepsone v_n \in \textbf{Value}
			\]
			Otherwise, if $\exists e_0': e_0\stepsone e_0'$ holds, we have that $\#n~e_0\stepsone \#n~e_0'$.
			
			\medskip
			
			\item
			{\em Case $e = (\#n~e_1 := e_2)$}:
			
			Suppose $\proves e : \tau$.
			Then it must be that
			\[
				\proves e : (\tau_1,\ldots,\tau_n,\ldots)\backslash\{n_1,\ldots,n_{i-1},n_{i+1},\ldots, n_k\}
			\]
			and we must have the premise of rule (3) satisfied, namely:
			\[
				\proves e_1 : (\tau_1*\ldots*\tau_n*\ldots)\backslash\{n_1, \ldots, n_k\}~\land ~ \exists i. n_i = n ~ \land ~\proves e_2 : \tau_n				
			\]
			From the induction hypothesis, since the derivations for $e_1$ and $e_2$ are subderivations of the one for $e$, it must hold that either $e_1\in\textbf{Value}$ or $\exists e_1': e_1\stepsone e_1'$, and either $e_2\in\textbf{Value}$ or $\exists e_2': e_2\stepsone e_2'$:
			\begin{itemize}
				\item
				If $\exists e_1': e_1\stepsone e_1'$ holds, from the operational semantics we have 
				\[
					\#n~e_1:=e_2 \stepsone \#n~e_1':=e_2
				\]
				\item If $e_1\in\textbf{Value}$ and $\exists e_2': e_2\stepsone e_2'$, from the operational semantics:
				\[
					\#n~e_1:=e_2 \stepsone \#n~e_1:=e_2'
				\]
				\item
				If $e_1=(v_1, \ldots, v_{n-1}, \textbf{null}, \ldots)\in\textbf{Value}$ and $e_2=v_n\in\textbf{Value}$, we can apply the last rule of the operational semantics:
				\[
					\#n~(v_1, \ldots, v_{n-1}, \textbf{null}, \ldots) := v_n 
			\stepsone (v_1, \ldots, v_{n-1}, v_n, \ldots)
				\]
			\end{itemize}
		\end{itemize}
		\item Soundness Theorem
		\end{enumerate}

		\item (BONUS) Reinitialization

	\end{enumerate}

\end{enumerate}

\end{document}
