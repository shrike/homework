\documentclass[11pt]{article}

\usepackage{amssymb}
\usepackage{amsmath}
\usepackage{611}
\usepackage{proof}
\usepackage{stmaryrd}
\usepackage{pst-tree}
\usepackage[left=0.6in,right=0.8in,top=0.8in,bottom=0.8in]{geometry}

\newcommand\case[3]{\ensuremath{\textbf{case}~#1~\textbf{of}~x.#2 \mid y.#3}}
\newcommand\inl[2]{\ensuremath{\textbf{inl}_{#1}#2}}
\newcommand\inr[2]{\ensuremath{\textbf{inr}_{#1}#2}}
\newcommand\sumt{\ensuremath{\tau_1+\tau_2}}

\makeatletter
\def\maketitle{%

    \begin {center}
    \bfseries
    \begin{tabular*}{\textwidth}{@{\extracolsep{\fill}} |rcl|}
        \hline
        & \@author & \\
        \@title & & \@set \\
        \@subtitle & & Due: \@duedate \\
        \hline
    \end{tabular*}
    \end {center}

} % maketitle

\def\set#1{\def\@set{#1}}
\def\duedate#1{\def\@duedate{#1}}
\def\subtitle#1{\def\@subtitle{#1}}
\def\netid#1{\def\@netid{#1}}

\makeatother

\author {Lyublena Antova, Viktor Ivanov}
\netid {lra33, vri3}
\title {Advanced PL}
\subtitle {CS 6110, Spring 2009}
\duedate {Friday, May 1}
\set {Problem Set 5}

\begin{document}

\maketitle

\begin{enumerate}
  %--------------------
  % *** Problem 1 *** %
  %--------------------
  \item \textbf{Strong normalization}

  \begin{enumerate}
  \item Strong normalization of $\lambda^{\rightarrow +}$

  We begin by extending the definition of $SN$ with the case for $\tau_1 + \tau_2$. Note that there are only two conditions.

  \begin{equation*}
    SN_{\tau_1 + \tau_2}(e) \iff \proves e : \tau_1 + \tau_2 \land e \stepsto
  \end{equation*}

  Next, we extend the proof for preservation of the $SN_{\tau}$ property when we walk either forward or backward in the evaluation sequence (\textbf{Lemma 2}) with the case for $\tau = \tau_1 + \tau_2$. Assume $\proves e : \tau_1 + \tau_2 \land e \stepsone e' \land SN_{\tau_1 + \tau_2}(e')$; we need to show $SN_{\tau_1 + \tau_2}(e)$. The proof is identical to the proof for the case $\tau = B$ because we have no third condition: $SN_{\tau_1 + \tau_2}(e')$ means $e'$ converges, but since $e \stepsone e'$ then $e$ converges as well; from $\proves e : \tau_1 + \tau_2$ and $e \stepsto$ we conclude $SN_{\tau_1 + \tau_2}(e)$.

  Finally, we need to extend the proof of \textbf{Lemma 4} which states that

  \begin{equation*}
    \Gamma \proves e : \tau \land \gamma \models \Gamma \implies \proves SN_{\tau} (\gamma (e))
  \end{equation*}

  with cases for proving the type of a \textbf{case} statement and the types of \textbf{inl} and \textbf{inr}.

  \begin{itemize}
  \item Case $\Gamma \proves \case{e_0}{e_1}{e_2} : \tau_3$

    We know from the typing derivation that the premises $\Gamma \proves e_0 : \tau_1 + \tau_2$, $\Gamma, x : \tau_1 \proves e_1 : \tau_3$ and $\Gamma, y : \tau_2 \proves e_2 : \tau_3$ hold for some $\tau_1$ and $\tau_2$.

    Now, lets consider $\gamma (\case{e_0}{e_1}{e_2})$. That's equivalent to pushing the substitution to the individual terms: $\case{\gamma(e_0)}{\gamma(e_1)}{\gamma(e_2}))$. The typing derivation for $e_0$ is a subderivation and thus we can apply the induction hypothesis yielding $SN_{\tau_1 + \tau_2}(\gamma(e_0))$. We now know that $\gamma(e_0) \stepsto$ and since $e_0 : \tau_1 + \tau_2$ then either $\gamma(e_0) \stepsto \inl{\tau_1 + \tau_2}{v_1}$ or $\gamma(e_0) \stepsto \inr{\tau_1 + \tau_2}{v_2}$ for some $v_1 : \tau_1$ and $v_2 : \tau_2$.

    Consider:
    
    \begin{equation*}
        \case{\gamma(e_0)}{\gamma(e_1)}{\gamma(e_2)} \stepsone^* 
        \case{\inl{\tau_1 + \tau_2}{v_1}} {\gamma(e_1)} {\gamma(e_2)}
    \end{equation*}
    
    By the definition of the \textbf{case} statement:
    
    \begin{equation*}
        \case{\inl{\tau_1 + \tau_2}{v_1}} {\gamma(e_1)} {\gamma(e_2)} \stepsone 
        \subst{\gamma(e_1)}{v_1}{x}
    \end{equation*}

    We can extend $\gamma$ with the substitution $v_1/x$ and we get:

    \begin{equation*}
        \gamma(\case{e_0}{e_1}{e_2}) \stepsone^* 
        \gamma[x \mapsto v_1](e_1)
    \end{equation*}

    Now note that $\gamma[x \mapsto v_1] \models \Gamma, x : \tau_1$ since $v_1 : \tau_1$. We also have $\proves e_1 : \tau_3$ therefore we can conclude $SN_{\tau_3}(\gamma[x \mapsto v_1](e_1))$. Applying \textbf{Lemma 2} multiple times to walk back in the evaluation sequence we obtain that $SN_{\tau_3}(\gamma(\case{e_0}{e_1}{e_2}))$. Similar reasoning can be used for the case when $\gamma(e_0) \stepsto \inr{\tau_1 + \tau_2}{v_2}$.

  \item Case $\Gamma \proves \inl{\tau_1+\tau_2}{e} : \tau_1 + \tau_2$

    We know from the typing derivations that the premise $\Gamma \proves e : \tau_1$ holds. Furthermore the typing derivation for $e$ is a subderivation thus we can apply the induction hypothesis and obtain $SN_{\tau_1}(\gamma(e))$ which means that $\gamma(e) \stepsto v$ for some value $v$. We know that $\gamma(\inl{\tau_1 + \tau_2}{e}) = \inl{\tau_1 + \tau_2}{\gamma(e)}$. Since $\gamma(e) \stepsto v$ then $\gamma(\inl{\tau_1 + \tau_2}{e}) \stepsone^* \inl{\tau_1+\tau_2}{v}$ and since $\inl{\tau_1+\tau_2}{v}$ is a value then we can conclude that $\gamma(\inl{\tau_1 + \tau_2}{e}) \stepsto$ and thus we have $SN_{\tau_1 + \tau_2}(\gamma(\inl{\tau_1 + \tau_2}{e}))$.

  \item Case $\Gamma \proves \inr{\tau_1+\tau_2}{e} : \tau_1 + \tau_2$

  Proof is equivalent to the proof shown in the previous case.
  \end{itemize}

  \item Proof fails if the language has recursive types

  \end{enumerate}

  %--------------------
  % *** Problem 2 *** %
  %--------------------
  \item \textbf{Encoding sum and product types in the polymorphic lambda calculus}

  \begin{enumerate}
  \item 
      \begin{enumerate}
      \item Formula equivalent to $A \land B$

      Consider the formula $\forall{p}. (A \implies B \implies p) \implies p$.

      \medskip

      \hspace{0.1em} \begin{array}[t]{l}
        \forall{p}. (A \implies B \implies p) \implies p = \\
        \forall{p}. \neg(A \implies B \implies p) \lor p = \\
        \forall{p}. \neg(\neg A \lor (B \implies p)) \lor p = \\
        \forall{p}. \neg(\neg A \lor (\neg B \lor p)) \lor p = \\
        \forall{p}. (A \land \neg(\neg B \lor p)) \lor p = \\
        \forall{p}. (A \land B \land \neg p) \lor p = \\
        A \land B
      \end{array}

      \item Formula equivalent to $A \lor B$

      Consider the formula $\forall{p}. (A \implies p) \implies (B \implies p) \implies p$.

     \medskip

      \hspace{0.1em} \begin{array}[t]{l}
        \forall{p}. (A \implies p) \implies (B \implies p) \implies p = \\
        \forall{p}. (\neg A \lor p) \implies (\neg B \lor p) \implies p = \\
        \forall{p}. (\neg A \lor p) \implies (\neg (\neg B \lor p) \lor p) = \\
        \forall{p}. \neg (\neg A \lor p) \lor (\neg (\neg B \lor p) \lor p) = \\
        \forall{p}. (A \land \neg p) \lor (B \land \neg p) \lor p = \\
        A \lor B
      \end{array}

      \end{enumerate}

    \item 
      \begin{enumerate}
        \item $\mathcal{T}^+\SB{\tau_1 * \tau_2} = \forall{\alpha}.(\tau_1 \rightarrow \tau_2 \rightarrow \alpha) \rightarrow \alpha$
        \item $\mathcal{T}^*\SB{\tau_1 + \tau_2} = \forall{\alpha}.(\tau_1 \rightarrow \alpha) \rightarrow (\tau_2 \rightarrow \alpha) \rightarrow \alpha$
      \end{enumerate}

    \item The transalation function $\mathcal{E}^+\SB{\cdot}$
      \medskip

      \hspace {0.1em} \begin{array}[t]{l}
        \mathcal{E}^+\SB{\Gamma \proves (e_1, e_2) : \tau_1 * \tau_2} = 
        \Lam{\alpha}{\lam{f : \tau_1 \rightarrow \tau_2 \rightarrow \alpha}}
          {f~
            (\mathcal{E}^+\SB{\Gamma \proves e_1 : \tau_1})~
            (\mathcal{E}^+\SB{\Gamma \proves e_2 : \tau_2})} \\
        \mathcal{E}^+\SB{\Gamma \proves \#1~e : \tau_1} = 
        \big((\mathcal{E}^+\SB{\Gamma \proves e : \tau_1 * \tau_2})~
        \tau_1\big)~
        \lam{a : \tau_1}{\lam{b : \tau_2}{a}}
      \end{array}

    \item The transalation function $\mathcal{E}^*\SB{\cdot}$
      \medskip

      \hspace {0.1em} \begin{array}[t]{l}
        \mathcal{E}^+\SB{\Gamma \proves \inl{\sumt}{e} : \sumt} = 
        \Lam{\alpha}{
          \lam{f : \tau_1 \rightarrow \alpha}{
            \lam{g : \tau_2 \rightarrow \alpha}{
              f~\mathcal{E}^+\SB{\Gamma \proves e : \tau_1}}}} \\
        \mathcal{E}^+\SB{\Gamma \proves \case{e_0}{e_1}{e_2} : \tau_3} = 
        \mathcal{E}^+\SB{\Gamma \proves e_0 : \sumt}~
        \tau_3~
        (\lam{x}{\mathcal{E}^+\SB{\Gamma \proves e_1 : \tau_3}})~
        (\lam{y}{\mathcal{E}^+\SB{\Gamma \proves e_2 : \tau_3}})
      \end{array}

  \end{enumerate}

  %--------------------
  % *** Problem 3 *** %
  %--------------------
  \item \textbf{Subtyping and recursion}
  \begin{enumerate}
	  % --- 3a. ---
	  \item
	  For type $A$ the regular tree looks like this:
	  
	  \begin{center}
	  \pstree[nodesep=4pt,levelsep=6ex,treesep=2em]{\TR{$\rightarrow$}}
				{
			    \TR{1}
			    \pstree[nodesep=4pt,levelsep=6ex,treesep=2em]{\TR{$\rightarrow$}}
					{
				    \TR{1}
				    \pstree[nodesep=4pt,levelsep=6ex,treesep=2em]{\TR{$\rightarrow$}}
						{
					    \TR{1}
					    \TR{\ldots}
						}
					}
				}
				\end{center}
				
			For type $B$ the regular tree looks in exactly the same way, i.e.\ like this:
			\begin{center}
	  	\pstree[nodesep=4pt,levelsep=6ex,treesep=2em]{\TR{$\rightarrow$}}
				{
			    \TR{1}
			    \pstree[nodesep=4pt,levelsep=6ex,treesep=2em]{\TR{$\rightarrow$}}
					{
				    \TR{1}
				    \pstree[nodesep=4pt,levelsep=6ex,treesep=2em]{\TR{$\rightarrow$}}
						{
					    \TR{1}
					    \TR{\ldots}
						}
					}
				}
			\end{center}
				
	  	Below we show that $A\le B$. To keep the proof readable we only show in the premise of the rule derivations the newly added subtyping relations to the context $S$, and use $\ldots$ to denote the ones carried over from the previous step. We have denoted by (\textsc{FN}), (\textsc{Refl}) and (\textsc{Unf}) the rules for typing a function, for inferring that a type is a subtype of itself, and the one used for terminating the unfolding:
	  	\[
	  		\RuleSide
	  		{S\proves\tau_1'\le\tau_1\quad S\proves\tau_2\le\tau_2'}
	  		{S\proves \tau_1\rightarrow\tau_2\le\tau_1'\rightarrow\tau_2'}
	  		{(\textsc{FN})}
	  	\]
	  	\[
	  		\RuleSide
	  		{}
	  		{S\proves \tau \le\tau}
	  		{(\textsc{Refl})}
	  	\]
	  	\[
	  		\RuleSide
	  		{}
	  		{S, \tau_1 \le\tau_2 \proves \tau_1 \le\tau_2}
	  		{(\textsc{Unf})}
	  	\]
	  	
	  	Then the proof derivation for $A\le B$ looks like this:
	  	\begin{footnotesize}
			\begin{equation*}
			 \RuleSide
			 % premise
			 {
				 \RuleSide
				 {\RuleSide
				 	{
				 		R_2\quad\quad
					 	\RuleSide
					 	{
					 		\RuleSide
					 		{
					 			R_1 \quad\quad
					 			\RuleSide{}
					 			{
						 		S,\ldots
						 	\proves \m{\alpha}{(1\rightarrow \alpha)}
						 					\le \m{\beta}{1\rightarrow (1\rightarrow \beta)}
						 		}{(\textsc{Unf})}
					 		}
					 		{S,\ldots, \m{\alpha}{(1\rightarrow \alpha)}
					 					\le 1\rightarrow \m{\beta}{1\rightarrow (1\rightarrow \beta)}
					 	\proves 1\rightarrow \m{\alpha}{(1\rightarrow \alpha)}
					 					\le 1\rightarrow \m{\beta}{1\rightarrow (1\rightarrow \beta)}}
					 		{(\textsc{FN})}				 		
					 	}
					 	{S,\ldots
					 	\proves \m{\alpha}{(1\rightarrow \alpha)}
					 					\le 1\rightarrow \m{\beta}{1\rightarrow (1\rightarrow \beta)}}
					 	{\textsc{(RecL)}}
				 	}
				 	{S, \ldots, 1\rightarrow \m{\alpha}{(1\rightarrow \alpha)}
				 						  \le \m{\beta}{1\rightarrow (1\rightarrow \beta)}
				 			\proves 1\rightarrow \m{\alpha}{(1\rightarrow \alpha)}
				 						  \le 1\rightarrow (1\rightarrow \m{\beta}{1\rightarrow (1\rightarrow \beta)})}
				 	{(FN)}
				 }
				 {S, \m{\alpha}{1\rightarrow \alpha} \le \m{\beta}{1\rightarrow (1\rightarrow \beta)}
				 			\proves 1\rightarrow \m{\alpha}{(1\rightarrow \alpha)}
				 						  \le \m{\beta}{1\rightarrow (1\rightarrow \beta)}}
				 	{\textsc{(RecR)}}
			 }
			 % conclusion
			 {S\proves \m{\alpha}{1\rightarrow \alpha} \le \m{\beta}{1\rightarrow (1\rightarrow \beta)}}
			 % side
			 {(\textsc{RecL})}
			\end{equation*}
	  	\end{footnotesize}
	  	
	  	In the last step we can apply the end-of-unfolding rule (\textsc{Unf}) since the subtyping we want to prove $()$ was added to the context $S$ in the first application of the $(\textsc{RecL})$ rule. To make the derivation fit in the page we have denoted by $R_1$ and $R_2$ the subderivations of the following kind, necessary to prove subtyping of function types:
	  	\[\RuleSide{}
					 	{S,\ldots\proves 1\le 1}
					 	{(\textsc{Refl})}
			\]
			We can prove that $B\le A$ in a similar way, the important part being that for removing $\mu$-s on the left- and right-hand side we need to apply rules (\textsc{RecL}) and (\textsc{RecR}), respectively, and use the function rule (\textsc{FN}) to infer subtyping of function types.
			
		\medskip
		
	  % --- 3b. ---
	  \item
		\begin{enumerate}
		
			% --- 3b.(i) ---
			\item True
			
			We can show the subtyping holds with the following derivation:
			\begin{footnotesize}
			\begin{equation*}
				\RuleSide
				{
					\RuleSide
					{
						\RuleSide
						{
							\RuleSide
							{}
							{
								S,\ldots
								\proves\m{P}{\{x:P\}}\le \m{Q}{\{x:Q\}}
							}
							{(\textsc{Unf})}
						}
						{
							S,\ldots, \{x:\m{P}{\{x:P\}}\}\le\m{Q}{\{x:Q\}}
							\proves\{x:\m{P}{\{x:P\}}\}\le \{x:\m{Q}{\{x:Q\}}\}
						}
						{}
					}
					{
						S,\m{P}{\{x:P\}}\le\m{Q}{\{x:Q\}}
						\proves\{x:\m{P}{\{x:P\}}\}\le\m{Q}{\{x:Q\}}
					}
					{(\textsc{RecR})}
				}
				{S\proves\m{P}{\{x:P\}}\le\m{Q}{\{x:Q\}}}
				{(\textsc{RecL})}
			\end{equation*}
			\end{footnotesize}
			
			Again, in the last step we were able to apply the end-of-unfolding rule since we added to the context $S$ the subtyping relation we want to derive in the application of the $(\textsc{RecL})$ rule.
			
			\medskip
			
			% --- 3b.(ii) ---						
			\item True
			
			Let $s_1, s_2$ denote the following subtyping relations:
			
			\begin{eqnarray*}
				s_1 & = & \m{P}{\{mv:\textbf{int}\rightarrow P, y: \textbf{int}\}}
					\le\m{Q}{\{mv:\textbf{int}\rightarrow Q\}}\\
				s_2 & = & 
					\{mv:\textbf{int}\rightarrow \m{P}{\{mv:\textbf{int}\rightarrow P, y: \textbf{int}\}}, y: \textbf{int}\}
					\le\m{Q}{\{mv:\textbf{int}\rightarrow Q\}}\\
			\end{eqnarray*}
			
			\begin{footnotesize}
			\begin{equation*}
				\RuleSide
				{
					\RuleSide
					{
						\RuleSide
						{
							\RuleSide
							{
								\RuleSide{}
								{S,s_1,s_2 \proves \textbf{int}\le\textbf{int}}
								{(\textsc{Refl})}
								\quad
								\RuleSide
								{
								}
								{
									S,s_1,s_2
									\proves \m{P}{\{mv:\textbf{int}\rightarrow P,
																y: \textbf{int}\}}
									\le \m{Q}{\{mv:\textbf{int}\rightarrow Q\}}
								}
								{(\textsc{Unf})}
							}
							{
							S,s_1,s_2
							\proves \textbf{int}\rightarrow \m{P}{\{mv:\textbf{int}\rightarrow P, y: \textbf{int}\}}
						\le\textbf{int}\rightarrow \m{Q}{\{mv:\textbf{int}\rightarrow Q\}}
							}
							{(\textsc{Rec})}
						}
						{
						S,s_1,s_2
						\proves \{mv:\textbf{int}\rightarrow \m{P}{\{mv:\textbf{int}\rightarrow P, y: \textbf{int}\}}, y: \textbf{int}\}
					\le\{mv:\textbf{int}\rightarrow \m{Q}{\{mv:\textbf{int}\rightarrow Q\}}\}
						}
						{}
					}
					{
						S, s_1
						\proves \{mv:\textbf{int}\rightarrow \m{P}{\{mv:\textbf{int}\rightarrow P, y: \textbf{int}\}}, y: \textbf{int}\}
					\le\m{Q}{\{mv:\textbf{int}\rightarrow Q\}}
					}
					{(\textsc{RecR})}
				}
				{S\proves
					\m{P}{\{mv:\textbf{int}\rightarrow P, y: \textbf{int}\}}
					\le\m{Q}{\{mv:\textbf{int}\rightarrow Q\}}}
				{(\textsc{RecL})}
			\end{equation*}
			\end{footnotesize}
			
			In the last step we can apply the end-of-unfolding rule since the relationship we want to derive is exactly $s_1$ from above, which was added in the context in the bottom-most derivation step.
			
			% --- 3b.(iii) ---
			\item False
			
			% --- 3b.(iv) ---
			\item False
			
			% --- 3b.(v) ---
			\item True
		\end{enumerate}
		\medskip
		
	  % --- 3c. ---
	  \item
			
	\end{enumerate}
	
  %--------------------
  % *** Problem 4 *** %
  %--------------------
  \item \textbf{Existential types}

\end{enumerate}

\end{document}
